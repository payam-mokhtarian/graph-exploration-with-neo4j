# -*- coding: utf-8 -*-
"""graph_ingestion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10TWX7ZbuGpefmZRTioETGgMkPIv_b3Ab
"""

# Install neo4j python module

!pip install neo4j

import pandas as pd
from neo4j import GraphDatabase
from neo4j.exceptions import ServiceUnavailable

"""## Setup Connection and Driver"""

# Neo4j GraphDB instance connection details

host = ""
user = "neo4j"
password = ""

# Establish driver and session

with GraphDatabase.driver(host, auth=(user, password)) as driver:
  driver.verify_connectivity()

session = driver.session(database="neo4j")

"""## Data Exploration"""

# CSV file URLS

education = "https://gist.githubusercontent.com/maruthiprithivi/10b456c74ba99a35a52caaffafb9d3dc/raw/a46af9c6c4bf875ded877140c112e9ff36f8f2e8/sng_education.csv"
transcation = 'https://gist.githubusercontent.com/maruthiprithivi/10b456c74ba99a35a52caaffafb9d3dc/raw/a46af9c6c4bf875ded877140c112e9ff36f8f2e8/sng_transaction.csv'
trips = "https://gist.githubusercontent.com/maruthiprithivi/10b456c74ba99a35a52caaffafb9d3dc/raw/a46af9c6c4bf875ded877140c112e9ff36f8f2e8/sng_trips.csv"
work = "https://gist.githubusercontent.com/maruthiprithivi/10b456c74ba99a35a52caaffafb9d3dc/raw/a46af9c6c4bf875ded877140c112e9ff36f8f2e8/sng_work.csv"

df_education = pd.read_csv(education)
df_transcation = pd.read_csv(transcation)
df_trips = pd.read_csv(trips)
df_work = pd.read_csv(work)

df_education.head(10)

df_transcation.head(10)

df_trips.head(10)

df_work.head(10)

"""## Data Ingestion to Neo4j DB"""

# Create constraint

session.run("CREATE CONSTRAINT passportNumberConstraint IF NOT EXISTS FOR (person:Person) REQUIRE person.passportnumber IS UNIQUE;")
session.run("CREATE CONSTRAINT countryNameConstraint IF NOT EXISTS FOR (country:Country) REQUIRE country.name IS UNIQUE;")
session.run("CREATE CONSTRAINT institutionNameConstraint IF NOT EXISTS FOR (institution:Institution) REQUIRE institution.name IS UNIQUE;")
session.run("CREATE CONSTRAINT merchantNameConstraint IF NOT EXISTS FOR (merchant:Merchant) REQUIRE merchant.name IS UNIQUE;")
session.run("CREATE CONSTRAINT cardNumberConstraint IF NOT EXISTS FOR (card:Card) REQUIRE card.cardnumber IS UNIQUE;")

# To check the created constraints, exectue: SHOW CONSTRAINTS;

# Create index

session.run("CREATE INDEX passportNumberConstraint IF NOT EXISTS FOR (person:Person) ON person.passportnumber;")
session.run("CREATE INDEX countryNameConstraint IF NOT EXISTS FOR (country:Country) ON country.name;")
session.run("CREATE INDEX institutionNameConstraint IF NOT EXISTS FOR (merchant:Merchant) ON merchant.name;")
session.run("CREATE INDEX cardNumberConstraint IF NOT EXISTS FOR (card:Card) ON card.cardnumber;")

# To check the created indeces, exectue: SHOW INDEXES;

# Data ingestion queries

query_education = """
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/payam-mokhtarian/graph-exploration-with-neo4j/ef9181bcc778a5111c153a9f13327a3ab24e9b02/data/sng_education.csv' AS row
MERGE (person:Person {passportnumber: row.passportnumber})
  ON CREATE SET 
    person.name = row.name
MERGE (institution:Institution {name: row.nameofinstitution})
MERGE (country:Country {name: row.country})
CREATE (course:Course {name: row.course})
MERGE (person)-[:STUDIED]->(institution)
MERGE (institution)<-[:FROM]-(course)
MERGE (country)<-[:FROM]-(institution)
MERGE (course)<-[:ENROLLED {year:row.startyear}]-(person)-[:GRADUATED {year:row.endyear}]->(course);
"""

query_work = """
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/payam-mokhtarian/graph-exploration-with-neo4j/main/data/sng_work.csv' AS row
MERGE (organization:Organization {designation: row.designation, name: row.nameoforganization, startyear: row.startyear, endyear: row.endyear})
MERGE (country:Country {name: row.country})
WITH organization, country, row
MATCH (person:Person {passportnumber: row.passportnumber})
MERGE (person)-[:EMPLOYED]->(organization);
"""

query_trips = """
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/payam-mokhtarian/graph-exploration-with-neo4j/main/data/sng_trips.csv' AS row
MERGE (citizenship:Country {name: row.citizenship})
MERGE (arrival:Country {name: row.arrivalcountry})
WITH  citizenship, arrival, row
MATCH (person:Person {passportnumber: row.passportnumber})
MERGE (person)-[:TRAVELLED {departuredate: row.departuredate, arrivaldate: row.arrivaldate}]->(arrival)
MERGE (person)-[:CITIZEN]->(citizenship);
"""

query_transaction = """
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/payam-mokhtarian/graph-exploration-with-neo4j/main/data/sng_transaction.csv' AS row
MERGE (card:Card {cardnumber: row.cardnumber})
MERGE (country:Country {name: row.country})
MERGE (merchant:Merchant {name: row.merchant})
WITH card, country, merchant, row
MATCH (person:Person {passportnumber: row.passportnumber})
MERGE (person)-[:HAS_CARD]->(card)
MERGE (merchant)<-[:TRANSACTED {amount: row.amount, transactiondate: row.transactiondate}]-(card)
MERGE (transaction)-[:FROM]->(merchant);
"""

query_list = [query_education, query_work, query_trips, query_transaction]

# Execute queries to create databse and ingest data

for queries in query_list:
  session.run(queries)

# Test and verification

nodes_count =  session.run("MATCH (n) RETURN COUNT(n) AS number_of_nodes")
relationship_count =  session.run("MATCH (n1)-[r]-> (n2) RETURN COUNT(r) AS number_of_relationships")
print('Number of ingested nodes: ' + str(list(nodes_count)[0]['number_of_nodes']))
print('Number of ingested relationship: ' + str(list(relationship_count)[0]['number_of_relationships']))

# Close driver and session

driver.close()
session.close()
